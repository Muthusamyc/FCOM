"""
Django settings for fcom project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import logging.config
import logging
import os
import environ
import sys
from .config import ENVIRONMENT

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Initialise environment variables
env = environ.Env()
if not os.path.exists(os.path.join(BASE_DIR, ".env")):
    print("Please create .env file in root directory")
    sys.exit(0)

environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

PROJECT_ENV = env("ENV")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "2wxj@+o-wpey(-hk4qx46h7%=vc95ns$6rx0c4h!v7hn@9vfx2"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = ENVIRONMENT[PROJECT_ENV]["DEBUG"]
ALLOWED_HOSTS = ENVIRONMENT[PROJECT_ENV]["ALLOWED_HOSTS"]


CSRF_TRUSTED_ORIGINS = ["https://fcomindia.com", "http://fcomindia.com"]


# Application definition

INSTALLED_APPS = [
    "daphne",
    "channels",
    # 'cloudinary_storage',
    # 'cloudinary',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "home",
    "bookings",
    "dashboard.index",
    "dashboard.master",
    "dashboard.services",
    "dashboard.orders",
    "dashboard.seo",
    "api",
    "chat",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}


CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.memcached.PyMemcacheCache",
        "LOCATION": "unix:/tmp/memcached.sock",
    }
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django_session_timeout.middleware.SessionTimeoutMiddleware",
]

SESSION_EXPIRE_SECONDS = 1200
SESSION_EXPIRE_AFTER_LAST_ACTIVITY = True
SESSION_TIMEOUT_REDIRECT = "/"  # Add your URL


ROOT_URLCONF = "fcom.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "home.context_processors.insert_meta",
                "home.context_processors.paytm_env",
                "home.context_processors.bookin_stage",
                "home.context_processors.get_role_id",
            ],
        },
    },
]

# WSGI_APPLICATION = 'fcom.wsgi.application'
ASGI_APPLICATION = "fcom.asgi.application"


CHANNEL_LAYERS = {"default": {
    "BACKEND": "channels.layers.InMemoryChannelLayer"}}

DATABASES = ENVIRONMENT[PROJECT_ENV]["DATABASES"]


DEFAULT_AUTO_FIELD = "django.db.models.AutoField"


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Calcutta"

USE_I18N = True

USE_L10N = True

USE_TZ = True

SESSION_COOKIE_SAMESITE = None
# if PROJECT_ENV == "developement":
#     # Configuration
#     CLOUDINARY_STORAGE = {
#         'CLOUD_NAME': 'djjfg4hut',
#         'API_KEY': '671893417844165',
#         'API_SECRET': 'O8DhoVUVuHtSgMQPDCaO1_sIBso'
#     }

#     DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/static/"
MEDIA_URL = "/media/"

MEDIA_ROOT = os.path.join(BASE_DIR, "media/")
STATIC_ROOT = os.path.join(BASE_DIR, "static/")


LOGIN_REDIRECT_URL = "dashboard"

AUTH_USER_MODEL = "master.User"
AUTH_USER_MODEL_USERNAME_FIELD = "email"
AUTH_EMAIL_REQUIRED = False
AUTH_UNIQUE_EMAIL = False

AUTH_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = "email"

LOGIN_URL = "/login/"


ITEMS_IMAGE_UPLOAD_PATH = "items"
USER_PROFILE_UPLOAD_PATH = "profile"
PARTNER_GALLERY_UPLOAD_PATH = "gallery"
PICKEDUP_ITEMS_IMAGE_UPLOAD_PATH = "pickedup"
CHAT_UPLOADED_FILES_PATH = "chat_uploads"

####################################### Logging Info ####################################################################
LOG_FILE_PATH = os.path.join(BASE_DIR, "logs/error.log")
LOGGING_CONFIG = None

if not os.path.exists("logs"):
    os.makedirs("logs")

if DEBUG:
    import sys

    handler = logging.StreamHandler(sys.stdout)
    handler.setLevel(logging.INFO)
    formatter = logging.Formatter(
        "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    handler.setFormatter(formatter)
    logging.basicConfig(level=logging.INFO, handlers=[handler])
else:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'filters': {
            'special': {
                '()': 'project.logging.SpecialFilter',
                'foo': 'bar',
            },
            'require_debug_true': {
                '()': 'django.utils.log.RequireDebugTrue',
            },
        },
        "handlers": {
            "file": {
                "class": "logging.FileHandler",
                "filename": LOG_FILE_PATH,
                "level": env("LOG_LEVEL"),
            },
            'console': {
                'level': 'INFO',
                'filters': ['require_debug_true'],
                'class': 'logging.StreamHandler',
                'formatter': 'simple'
            },

        },
        "formatters": {
            "verbose": {
                "format": "{levelname}-{name}-{levelname}-{message}",
                "style": "{",
            },
            'simple': {
                'format': '{levelname} {message}',
                'style': '{',
            },

        },
        'loggers': {
            'daphne': {
                'handlers': [
                    'file',
                ],
                'level':  env("LOG_LEVEL")
            },
            'django': {
                'handlers': ['file'],
                'level': env("LOG_LEVEL"),
            },
            'django.request': {
                'handlers': ['file'],
                'level': 'ERROR',
                'propagate': False,
            },
        },
    }
    LOGGING['loggers'] = "daphne"
